
buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'org.github.ngbinh.scalastyle:gradle-scalastyle-plugin_2.11:1.0.1'

    }
}
plugins {
    id 'com.commercehub.gradle.plugin.avro' version '0.8.0'
    id 'org.scoverage' version '2.5.0'
    id 'net.minecrell.licenser' version '0.4.1'
    id 'com.github.jk1.dependency-license-report' version '0.5.0'
    id 'com.github.johnrengelman.shadow' version '2.0.4'
}

allprojects {
    repositories {
        mavenCentral()
        jcenter()
    }
}

apply from: 'gradle/version-properties.gradle'

def allProjs = allprojects

apply plugin: 'scala'



repositories {
    mavenCentral()
}

configure(allProjs) {
    apply plugin: 'application'
    apply plugin: 'java'
    apply plugin: 'scala'
    // apply plugin: 'findbugs'
    apply plugin: 'org.scoverage'
    apply plugin: 'scalaStyle'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'project-report'
    apply plugin: 'com.commercehub.gradle.plugin.avro'
    apply plugin: 'net.minecrell.licenser'
    apply plugin: 'com.github.jk1.dependency-license-report'
    apply plugin: 'com.github.johnrengelman.shadow'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    // Set this to the main class for cli.
    // Could not figure out how to configure it just for the cli subproject.
    mainClassName = "com.salesforce.op.cli.CLI"

    ext {
        scalaVersion = '2.11'
        scalaVersionRevision = '12'
        scalaTestVersion = '3.0.5'
        scalaCheckVersion = '1.14.0'
        junitVersion = '4.11'
        avroVersion = '1.7.7'
        sparkVersion = '2.3.2'
        sparkAvroVersion = '4.0.0'
        scalaGraphVersion = '1.12.5'
        scalafmtVersion = '1.5.1'
        hadoopVersion = 'hadoop2'
        scalajCollVersion = '0.1.2'
        json4sVersion = '3.2.11' // matches Spark dependency version
        jodaTimeVersion = '2.9.4'
        jodaConvertVersion = '1.8.1'
        algebirdVersion = '0.13.4'
        jacksonVersion = '2.7.3'
        luceneVersion = '7.3.0'
        enumeratumVersion = '1.4.12'
        scoptVersion = '3.5.0'
        googleLibPhoneNumberVersion = '8.8.5'
        googleGeoCoderVersion = '2.82'
        googleCarrierVersion = '1.72'
        chillVersion = '0.8.4'
        reflectionsVersion = '0.9.11'
        collectionsVersion = '3.2.2'
        optimaizeLangDetectorVersion = '0.0.1'
        tikaVersion = '1.16'
        sparkTestingBaseVersion = '2.3.1_0.10.0'
        sourceCodeVersion = '0.1.3'
        pegdownVersion = '1.4.2'
        commonsValidatorVersion = '1.6'
        commonsIOVersion = '2.6'
        scoveragePluginVersion = '1.3.1'
        hadrianVersion = '0.8.5'
        aardpfarkVersion = '0.1.0-SNAPSHOT'
        xgboostVersion = '0.81'
        akkaSlf4jVersion = '2.3.11'

        mainClassName = 'com.salesforce.Main'
    }
    configurations {
        scalaLibrary
        scalaCompiler
    }


    dependencies {
        compile 'org.scala-lang:scala-library:2.11.6'
        zinc 'com.typesafe.zinc:zinc:0.3.15'
        scoverage "org.scoverage:scalac-scoverage-plugin_$scalaVersion:$scoveragePluginVersion"
        scoverage "org.scoverage:scalac-scoverage-runtime_$scalaVersion:$scoveragePluginVersion"
        scalaLibrary "org.scala-lang:scala-library:$scalaVersion.$scalaVersionRevision"
        scalaCompiler "org.scala-lang:scala-compiler:$scalaVersion.$scalaVersionRevision"
        compile "org.scala-lang:scala-library:$scalaVersion.$scalaVersionRevision"

        // Test
        compileOnly "org.scalatest:scalatest_$scalaVersion:$scalaTestVersion"
        testCompile "org.scalatest:scalatest_$scalaVersion:$scalaTestVersion"
        compileOnly "org.scalacheck:scalacheck_$scalaVersion:$scalaCheckVersion"
        testCompile "org.scoverage:scalac-scoverage-plugin_$scalaVersion:$scoveragePluginVersion"
        testCompile "org.scoverage:scalac-scoverage-runtime_$scalaVersion:$scoveragePluginVersion"
        testCompile "org.scalacheck:scalacheck_$scalaVersion:$scalaCheckVersion"
        testCompile ("com.holdenkarau:spark-testing-base_$scalaVersion:$sparkTestingBaseVersion") { transitive = false }
        testCompile "junit:junit:$junitVersion"
        testRuntime "org.pegdown:pegdown:$pegdownVersion"
        // Your other deps here
    }

}


sourceSets.main.scala.srcDirs = ['.']